@model SupportHub.Models.SolutionViewModel
@using System.Text.RegularExpressions

@{
    ViewData["Title"] = "Review Solution";
}

<style>
    body {
        background-color: #f4f6f9;
        font-family: 'Inter', sans-serif;
    }

    .review-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
    }

    .card {
        border: none;
        border-radius: 12px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        overflow: hidden;
    }

    .card-header {
        background: linear-gradient(135deg, #6c757d, #495057);
        color: white;
        padding: 1.5rem;
        border-bottom: none;
    }

        .card-header h2 {
            margin: 0;
            font-size: 1.75rem;
            font-weight: 600;
        }

    .card-body {
        padding: 2rem;
        background-color: #fff;
    }

    .form-label {
        font-weight: 500;
        color: #343a40;
        margin-bottom: 0.5rem;
    }

    .form-control-static {
        background-color: #f8f9fa;
        padding: 0.75rem;
        border-radius: 6px;
        color: #495057;
    }

    .content-preview {
        background-color: #f8f9fa;
        padding: 1rem;
        border-radius: 6px;
        border: 1px solid #e9ecef;
        min-height: 100px;
    }

    .list-group-item {
        border: none;
        border-bottom: 1px solid #e9ecef;
        padding: 1rem 0;
        display: flex;
        align-items: center;
        justify-content: space-between;
        flex-wrap: wrap;
    }

        .list-group-item:last-child {
            border-bottom: none;
        }

    .badge {
        font-size: 0.75rem;
        padding: 0.4rem 0.8rem;
        border-radius: 12px;
        margin-left: 0.5rem;
    }

    .form-select,
    textarea {
        border-radius: 6px;
        border: 1px solid #ced4da;
        transition: border-color 0.2s;
    }

        .form-select:focus,
        textarea:focus {
            border-color: #007bff;
            box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
        }

    .action-buttons {
        display: flex;
        gap: 1rem;
        justify-content: center;
        align-items: center;
        flex-wrap: wrap;
        padding: 1rem;
        background-color: #f8f9fa;
        border-radius: 8px;
        margin-top: 2rem;
    }

    .btn {
        padding: 0.75rem 1.5rem;
        border-radius: 6px;
        font-weight: 600;
        font-size: 1rem;
        text-align: center;
        text-decoration: none;
        cursor: pointer;
        border: 1px solid transparent;
        transition: all 0.2s ease;
        opacity: 1 !important;
        flex: 1;
        max-width: 180px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .btn-success {
        background-color: #28a745;
        border-color: #28a745;
        color: white;
    }

        .btn-success:hover,
        .btn-success:focus {
            background-color: #1e7e34;
            border-color: #1c7430;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
        }

    .btn-outline-secondary {
        background-color: transparent;
        border-color: #6c757d;
        color: #6c757d;
    }

        .btn-outline-secondary:hover,
        .btn-outline-secondary:focus {
            background-color: #5c636a;
            border-color: #5c636a;
            color: white;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
        }

    .btn-warning {
        background-color: #ffc107;
        border-color: #ffc107;
        color: #212529;
    }

        .btn-warning:hover,
        .btn-warning:focus {
            background-color: #d39e00;
            border-color: #c69500;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
        }

    .btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
    }

    .code-block {
        position: relative;
        background-color: #e9ecef;
        padding: 15px;
        border-radius: 8px;
        margin: 10px 0;
        font-family: 'Courier New', Courier, monospace;
    }

    .copy-btn {
        position: absolute;
        top: 10px;
        right: 10px;
        padding: 5px 10px;
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 0.9rem;
    }

        .copy-btn:hover {
            background-color: #0056b3;
        }
</style>

<div class="review-container">
    <div class="card">
        <div class="card-header">
            <h2 class="text-center">Review Solution</h2>
        </div>
        <div class="card-body">
            @if (TempData["error"] != null)
            {
                <div class="alert alert-danger">@TempData["error"]</div>
            }
            @if (TempData["success"] != null)
            {
                <div class="alert alert-success">@TempData["success"]</div>
            }

            <form method="post" asp-action="Review" id="reviewForm">
                <input type="hidden" asp-for="Id" />

                <div class="mb-4">
                    <label class="form-label">Title</label>
                    <p class="form-control-static">@Model.Title</p>
                </div>

                <div class="mb-4 row">
                    <div class="col-md-6">
                        <label class="form-label">Product</label>
                        <p class="form-control-static">@Model.Products.FirstOrDefault(p => p.Id == Model.ProductId)?.ProductName</p>
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">Subcategory</label>
                        <p class="form-control-static">@Model.SubCategories.FirstOrDefault(s => s.Id == Model.SubCategoryId)?.Name</p>
                    </div>
                </div>

                <div class="mb-4">
                    <label class="form-label">Category</label>
                    <p class="form-control-static">@Model.Categories.FirstOrDefault(c => c.Id == Model.CategoryId)?.Name</p>
                </div>

                <div class="mb-4">
                    <label class="form-label">Related Issue</label>
                    <p class="form-control-static">@Model.IssueDescription</p>
                </div>

                <div class="mb-4">
                    <label class="form-label">
                        Solution Content
                        @if (Model.IsInternalTemplate)
                        {
                            <span class="badge bg-warning text-dark">Internal</span>
                        }
                    </label>
                    <div class="content-preview">
                        @Html.Raw(Regex.Replace(Model.HtmlContent, @"<pre[^>]*>\s*<code>(.*?)</code>\s*</pre>", m =>
                                 "<div class='code-block'>" +
                                 "<button class='copy-btn' onclick='copyCode(this, event)'>Copy</button>" +
                                 "<pre><code>" + m.Groups[1].Value + "</code></pre>" +
                                 "</div>", RegexOptions.Singleline))
                    </div>
                </div>

                <div class="mb-4">
                    <label class="form-label">Attachments</label>
                    <ul class="list-group">
                        @if (Model.Attachments != null && Model.Attachments.Any())
                        {
                            @foreach (var attachment in Model.Attachments)
                            {
                                <li class="list-group-item">
                                    <div>
                                        <strong>@(string.IsNullOrEmpty(attachment.FileName) ? "Unnamed File" : attachment.FileName)</strong>
                                        <span>(@(string.IsNullOrEmpty(attachment.Caption) ? "No caption" : attachment.Caption))</span>
                                        @if (attachment.IsInternal)
                                        {
                                            <span class="badge bg-warning text-dark">Internal</span>
                                        }
                                    </div>
                                    @if (attachment.Id > 0)
                                    {
                                        <a href="@Url.Action("DownloadAttachmentForReview", "Solution", new { area = "Admin", id = attachment.Id })"
                                           class="btn btn-sm btn-outline-primary download-attachment"
                                           target="_blank"
                                           rel="noopener noreferrer"
                                           data-attachment-id="@attachment.Id">View</a>
                                    }
                                    else
                                    {
                                        <span class="text-muted">Download unavailable</span>
                                    }
                                </li>
                            }
                        }
                        else
                        {
                            <li class="list-group-item">No attachments available.</li>
                        }
                    </ul>
                </div>

                <div class="mb-4">
                    <label class="form-label">References</label>
                    <ul class="list-group">
                        @if (Model.References != null && Model.References.Any())
                        {
                            @foreach (var reference in Model.References)
                            {
                                string displayUrl = reference.Url;
                                string hrefUrl = reference.Url;

                                if (!hrefUrl.StartsWith("http://") && !hrefUrl.StartsWith("https://"))
                                {
                                    hrefUrl = "https://" + hrefUrl;
                                }
                                displayUrl = displayUrl.Replace("https://", "").Replace("http://", "").TrimEnd('/');

                                <li class="list-group-item">
                                    <div>
                                        <a href="@hrefUrl" target="@reference.OpenOption">@displayUrl</a>
                                        @if (!string.IsNullOrEmpty(reference.Description))
                                        {
                                            <span>(@reference.Description)</span>
                                        }
                                        @if (reference.IsInternal)
                                        {
                                            <span class="badge bg-warning text-dark">Internal</span>
                                        }
                                    </div>
                                </li>
                            }
                        }
                        else
                        {
                            <li class="list-group-item">No references available.</li>
                        }
                    </ul>
                </div>

                <div class="mb-4">
                    <label class="form-label">Feedback</label>
                    <textarea id="feedbackEditor" name="feedback">@Html.Raw(Model.Feedback)</textarea>
                </div>

                <div class="mb-4">
                    <label class="form-label">Status</label>
                    <select name="status" class="form-select" required>
                        <option value="" disabled selected>Select a status</option>
                        <option value="UnderReview">Under Review (Save Progress)</option>
                        <option value="Approved">Approved and Published</option>
                        <option value="Rejected">Rejected</option>
                        <option value="NeedsRevision">Needs Revision</option>
                        <option value="Submitted">Submitted</option>
                    </select>
                </div>

                <div class="action-buttons mt-4">
                    <button type="submit" class="btn btn-success" aria-label="Save review">Save Review</button>
                    <a asp-action="Approvals" class="btn btn-outline-secondary" aria-label="Cancel review">Cancel</a>
                    <button type="button" class="btn btn-warning" onclick="releaseReview(@Model.Id)" aria-label="Release review and set status to Submitted">Release Review</button>
                </div>
            </form>
        </div>
    </div>
</div>

<div class="mb-5 pb-5"></div>
<div style="min-height: 100px;"></div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="~/js/tinymce-solution.js"></script>
    <partial name="_ValidationScriptsPartial" />

    <script>
        // Log IsInternalTemplate for debugging
        console.log('IsInternalTemplate:', @Model.IsInternalTemplate.ToString().ToLower());

        tinymce.init({
            selector: '#feedbackEditor',
            readonly: false,
            plugins: 'lists table wordcount',
            toolbar: 'undo redo | bold italic | numlist bullist | table',
            menubar: false,
            height: 300,
            setup: function (editor) {
                editor.on('init', function () {
                    console.log('Feedback TinyMCE initialized');
                });
                editor.on('change', function () {
                    editor.save();
                });
            }
        });

        $('#reviewForm').on('submit', function (e) {
            tinymce.get('feedbackEditor').save();
            var status = $('select[name="status"]').val();
            if (!status) {
                e.preventDefault();
                alert('Please select a status.');
                return false;
            }
        });

        function releaseReview(solutionId) {
            if (confirm('Are you sure you want to release this review?')) {
                tinymce.get('feedbackEditor').save();
                $('select[name="status"]').val('Submitted');
                var formData = $('#reviewForm').serialize() + '&id=' + solutionId;

                $.post('/Admin/Solution/ReleaseReview', formData, function (response) {
                    if (response.success) {
                        window.location.href = '/Admin/Solution/Approvals';
                    } else {
                        alert('Error releasing review: ' + (response.error || 'Unknown error'));
                    }
                }).fail(function () {
                    alert('An error occurred while releasing the review.');
                });
            }
        }

        $('.download-attachment').on('click', function () {
            console.log('Download clicked for attachment ID: ' + $(this).data('attachment-id'));
        });

        // Ensure attachment links open in a new tab
        document.addEventListener('DOMContentLoaded', function () {
            document.querySelectorAll('.download-attachment').forEach(link => {
                link.addEventListener('click', function (e) {
                    e.preventDefault();
                    window.open(this.href, '_blank', 'noopener,noreferrer');
                });
            });
        });

        function copyCode(button, event) {
            event.preventDefault();
            event.stopPropagation();
            const codeBlock = button.nextElementSibling.querySelector('code');
            const text = codeBlock.textContent;
            navigator.clipboard.writeText(text).then(() => {
                button.textContent = 'Copied!';
                setTimeout(() => {
                    button.textContent = 'Copy';
                }, 2000);
            }).catch(err => {
                console.error('Failed to copy code: ', err);
                button.textContent = 'Error';
                setTimeout(() => {
                    button.textContent = 'Copy';
                }, 2000);
            });
        }
    </script>
}