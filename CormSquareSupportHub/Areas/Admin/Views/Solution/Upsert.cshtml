@model SupportHub.Models.SolutionViewModel
@{
    ViewData["Title"] = Model.Id > 0 ? "Edit Solution" : "Create Solution";
}

<div class="card shadow border-0 mt-4">
    <div class="card-header bg-secondary bg-gradient ml-0 py-3">
        <h2 class="text-center py-2">@ViewData["Title"]</h2>
    </div>
    <div class="container mb-5 pb-5">
        <div class="card-body p-4">
            <form method="post" enctype="multipart/form-data" asp-action="Upsert" id="solutionForm">
                <input type="hidden" asp-for="Id" />
                <!-- Title -->
                <div class="mb-3">
                    <label asp-for="Title"></label>
                    <input asp-for="Title" class="form-control" required />
                    <span asp-validation-for="Title" class="text-danger"></span>
                </div>

                <!-- Product and Subcategory in the same row -->
                <div class="mb-3 row">
                    <div class="col-md-6">
                        <label asp-for="ProductId">Client</label>
                        <select asp-for="ProductId" class="form-control" id="productDropdown" required>
                            <option value="">Select Client</option>
                            @foreach (var product in Model.Products)
                            {
                                <option value="@product.Id">@product.ProductName</option>
                            }
                        </select>
                        <span asp-validation-for="ProductId" class="text-danger"></span>
                    </div>
                    <div class="col-md-6">
                        <label asp-for="SubCategoryId">Product</label>
                        <select asp-for="SubCategoryId" class="form-control" id="subCategoryDropdown">
                            <option value="">Select Product</option>
                            @if (Model.SubCategories != null)
                            {
                                @foreach (var sub in Model.SubCategories)
                                {
                                    <option value="@sub.Id" selected="@(sub.Id == Model.SubCategoryId)">@sub.Name</option>
                                }
                            }
                        </select>
                    </div>
                </div>

                <!-- Issue Description -->
                <div class="mb-3">
                    <label asp-for="IssueDescription">Related Issue</label>
                    <textarea asp-for="IssueDescription" class="form-control" readonly="@(!string.IsNullOrEmpty(Model.IssueDescription))"></textarea>
                </div>

                <!-- Category and Contributors in the same row -->
                <div class="mb-3 row">
                    <div class="col-md-6">
                        <label asp-for="CategoryId">Category</label>
                        <select asp-for="CategoryId" class="form-control" id="categoryDropdown" required>
                            <option value="">Select Category</option>
                            @foreach (var category in Model.Categories)
                            {
                                <option value="@category.Id" selected="@(category.Id == Model.CategoryId)">@category.Name</option>
                            }
                        </select>
                        <span asp-validation-for="CategoryId" class="text-danger"></span>
                    </div>
                    <div class="col-md-6">
                        <label asp-for="Contributors">Contributors</label>
                        <input asp-for="Contributors" class="form-control" placeholder="e.g., John Doe, Jane Smith" />
                    </div>
                </div>

                <!-- Template -->
                <div class="mb-3">
                    <label asp-for="HtmlContent">Solution Content</label>
                    <textarea id="editor">@Html.Raw(Model.HtmlContent)</textarea>
                    <input type="hidden" id="HtmlContent" name="HtmlContent" value="@Html.Raw(Model.HtmlContent)" />
                    <span asp-validation-for="HtmlContent" class="text-danger"></span>
                </div>

                <!-- Attachments Section -->
                <div class="mb-3">
                    <button type="button" id="uploadAttachmentBtn" class="btn btn-success btn-sm">Add Attachment</button>
                    <input type="file" name="files" id="attachmentInput" multiple style="display: none;" />
                    <ul id="attachmentList" class="list-group mt-2">
                        @if (ViewData["AttachmentLinks"] != null)
                        {
                            var links = ViewData["AttachmentLinks"] as IEnumerable<dynamic>;
                            var solutionAttachments = Model.Attachments;
                            if (links != null && links.Any())
                            {
                                var index = 0;
                                foreach (var link in links)
                                {
                                    var attachment = solutionAttachments.FirstOrDefault(a => a.Id == (int)link.Id);
                                    var isInternal = attachment?.IsInternal ?? false;
                                    <li class="list-group-item d-flex justify-content-between align-items-center" data-attachment-id="@link.Id">
                                        <div>
                                            <a href="@link.Url" class="attachment-link" target="_blank" rel="noopener noreferrer">@link.FileName</a><br />
                                            <input type="text" class="form-control mt-1 caption-input" placeholder="Enter caption" data-index="@index" value="@(attachment?.Caption ?? "")" />
                                        </div>
                                        <div>
                                            <input type="checkbox" class="form-check-input internal-attachment" data-index="@index" @(isInternal ? "checked" : "") />
                                            <span>Internal</span>
                                            <span class="text-danger delete-attachment ms-3" style="cursor:pointer;" data-index="@index">❌</span>
                                        </div>
                                    </li>
                                    index++;
                                }
                            }
                        }
                    </ul>
                    <input type="hidden" id="attachmentData" name="AttachmentData" value="@Html.Raw(Json.Serialize(Model.Attachments.Select(a => new { id = a.Id, fileName = a.FileName, guidFileName = a.FileName, caption = a.Caption, isInternal = a.IsInternal, isDeleted = false, fromParent = false })))" />
                </div>

                <!-- References Section -->
                <div class="mb-3">
                    <button type="button" id="addReferenceBtn" class="btn btn-success btn-sm">Add Reference</button>
                    <ul id="referenceList" class="list-group mt-2">
                        @if (Model.References != null)
                        {
                            var index = 0;
                            foreach (var reference in Model.References)
                            {
                                <li class="list-group-item d-flex justify-content-between align-items-center" data-reference-id="@reference.Id">
                                    <div>
                                        <a href="@reference.Url" target="@reference.OpenOption" class="reference-link">@reference.Url</a><br />
                                        <input type="text" class="form-control mt-1 description-input" placeholder="Enter description" value="@reference.Description" data-index="@index" />
                                    </div>
                                    <div>
                                        <input type="checkbox" class="form-check-input internal-reference" data-index="@index" @(reference.IsInternal ? "checked" : "") />
                                        <span>Internal</span>
                                        <span class="text-danger delete-reference ms-3" style="cursor:pointer;" data-index="@index">❌</span>
                                    </div>
                                </li>
                                index++;
                            }
                        }
                    </ul>
                    <input type="hidden" id="referenceData" name="ReferenceData" value="@Html.Raw(Json.Serialize(Model.References.Select(r => new { id = r.Id, url = r.Url, description = r.Description, isInternal = r.IsInternal, openOption = r.OpenOption, isDeleted = false })))" />
                </div>

                <!-- Buttons -->
                <div class="text-center mt-4">
                    <button type="submit" name="submitAction" value="Save" class="btn btn-primary mx-2" style="width:200px">
                        <i class="bi bi-save"></i> Save Draft
                    </button>
                    <button type="submit" name="submitAction" value="Submit" class="btn btn-success mx-2" style="width:200px">
                        <i class="bi bi-check-circle"></i> Submit for Review
                    </button>
                    <button type="button" id="cancelButton" class="btn btn-outline-secondary mx-2" style="width:200px">
                        <i class="bi bi-arrow-left-circle"></i> Cancel
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>
<div class="mb-5 pb-5"></div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/prism.min.js"></script>
    <script src="~/js/tinymce-solution.js"></script>
    <script src="~/js/solution-attachments-references.js"></script>
    <partial name="_ValidationScriptsPartial" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/css/toastr.min.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism.min.css" />

    <script>
            $(document).ready(function () {
        console.log("Upsert view script loaded (v4.3)");
        const urlParams = new URLSearchParams(window.location.search);
        const isCreateMode = !urlParams.has('solutionId');
        console.log("isCreateMode:", isCreateMode);

        // Initialize arrays with error handling
        let initialAttachments = [];
        let initialReferences = [];
        try {
            const attachmentData = $('#attachmentData').val();
            const referenceData = $('#referenceData').val();

            // Parse attachmentData safely
            window.attachments = [];
            if (attachmentData) {
                try {
                    window.attachments = JSON.parse(attachmentData);
                    if (!Array.isArray(window.attachments)) {
                        console.warn("attachmentData is not an array:", window.attachments);
                        window.attachments = [];
                    }
                } catch (e) {
                    console.error("Error parsing attachmentData:", e, attachmentData);
                    window.attachments = [];
                }
            }

            // Parse referenceData safely
            window.references = [];
            if (referenceData) {
                try {
                    window.references = JSON.parse(referenceData);
                    if (!Array.isArray(window.references)) {
                        console.warn("referenceData is not an array:", window.references);
                        window.references = [];
                    }
                } catch (e) {
                    console.error("Error parsing referenceData:", e, referenceData);
                    window.references = [];
                }
            }

            // Create deep copies for initial state
            initialAttachments = JSON.parse(JSON.stringify(window.attachments));
            initialReferences = JSON.parse(JSON.stringify(window.references));
            console.log('Initialized from hidden inputs:', { attachments: window.attachments, references: window.references });
            console.log('Stored initial state:', { initialAttachments, initialReferences });

            // Force initial state restoration
            if (typeof window.forceRestoreState === 'function') {
                window.forceRestoreState();
            }
        } catch (e) {
            console.error('Error initializing arrays:', e);
            toastr.error('Failed to initialize data. Please refresh the page.');
            window.attachments = [];
            window.references = [];
        }

        // Handle Save/Submit buttons
        let submitActionValue = null;
        $('button[type="submit"]').on('click', function (e) {
            submitActionValue = $(this).val();
            console.log('Button clicked, submitAction set to:', submitActionValue);
        });

        // Handle Cancel button
        $('#cancelButton').on('click', function (e) {
            e.preventDefault();
            console.log('Cancel button clicked');
            // Assign initial state directly without redundant JSON parsing
            window.attachments = initialAttachments;
            window.references = initialReferences;
            window.reindexAttachments();
            window.reindexReferences();
            window.updateAttachmentData();
            window.updateReferenceData();
            window.clearSessionStorage();
            toastr.info('Changes discarded.');
            const redirectUrl = isCreateMode ? '/Admin/Issue/IssueList' : '/Admin/Solution/MySolutions';
            console.log('Redirecting to:', redirectUrl);
            window.location.href = redirectUrl;
        });

            // Handle product dropdown change
            $('#productDropdown').change(function () {
                var productId = $(this).val();
                console.log('ProductId changed to:', productId);
                if (productId) {
                    $.get('/Admin/Issue/GetSubCategories', { productId: productId }, function (data) {
                        console.log('GetSubCategories response:', data);
                        var subCatDropdown = $('#subCategoryDropdown');
                        subCatDropdown.empty().append('<option value="">Select Product</option>');
                        $.each(data, function (i, item) {
                            subCatDropdown.append($('<option>').val(item.id).text(item.name));
                        });
                    }).fail(function (xhr, status, error) {
                        console.error('Failed to load subcategories:', status, error);
                        toastr.error('Failed to load products.');
                    });
                } else {
                    $('#subCategoryDropdown').empty().append('<option value="">Select Product</option>');
                }
            });

            // Handle category dropdown change
            $('#categoryDropdown').change(function () {
                var categoryId = $(this).val();
                console.log('CategoryId changed to:', categoryId);
                if (categoryId) {
                    console.log(`Loading template for categoryId=${categoryId}`);
                    $.ajax({
                        url: '/Admin/Solution/GetCategoryTemplate',
                        type: 'GET',
                        data: { categoryId: categoryId },
                        cache: false,
                        success: function (response) {
                            console.log('GetCategoryTemplate response:', response);
                            if (response.success && response.data) {
                                // Update TinyMCE editor
                                var editor = tinymce.get('editor');
                                if (editor) {
                                    editor.setContent(response.data.htmlContent || '');
                                    $('#HtmlContent').val(editor.getContent());
                                    console.log('Updated TinyMCE content:', response.data.htmlContent);
                                } else {
                                    console.warn('TinyMCE editor not found');
                                    $('#HtmlContent').val(response.data.htmlContent || '');
                                }
                                // Update attachments and references
                                window.updateAttachmentsAndReferences(
                                    response.data.attachments || [],
                                    response.data.references || []
                                );
                                toastr.success('Category template loaded successfully!');
                            } else {
                                console.warn('Failed to load template:', response.message);
                                toastr.error(response.message || 'Failed to load category template.');
                            }
                        },
                        error: function (xhr, status, error) {
                            console.error('Error loading template:', status, error, xhr.responseText);
                            var errorMsg = xhr.responseJSON?.message || error || 'Unknown error';
                            toastr.error('Error loading template: ' + errorMsg);
                        }
                    });
                } else if (isCreateMode) {
                    // In Create mode, clear content if no category selected
                    var editor = tinymce.get('editor');
                    if (editor) {
                        editor.setContent('');
                        $('#HtmlContent').val('');
                    } else {
                        $('#HtmlContent').val('');
                    }
                    window.updateAttachmentsAndReferences([], []);
                    console.log('Cleared template content and lists');
                }
            });

            // Form submission for Save/Submit
            $('#solutionForm').on('submit', function (e) {
                e.preventDefault();
                console.log('Form submit triggered');

                try {
                    var editor = tinymce.get('editor');
                    if (!editor) {
                        toastr.error('Editor not initialized. Please try again.');
                        return false;
                    }

                    tinymce.triggerSave();
                    var editorContent = editor.getContent();
                    $('#HtmlContent').val(editorContent);
                    console.log('Editor content:', editorContent);

                    // Validate
                    var title = $('#Title').val();
                    var productId = $('#productDropdown').val();
                    var categoryId = $('#categoryDropdown').val();
                    if (!title || !productId || productId === "" || !categoryId || categoryId === "" || !editorContent) {
                        toastr.error('Please fill all required fields.');
                        return false;
                    }

                    // Update ReferenceData
                    window.updateReferenceData();
                    console.log('ReferenceData before submission:', $('#referenceData').val());

                    var formData = new FormData(this);
                    if (submitActionValue) {
                        formData.append('submitAction', submitActionValue);
                    } else {
                        toastr.error('Please use the Save Draft or Submit for Review button.');
                        return false;
                    }

                    // Log FormData
                    console.log('FormData contents:');
                    for (let [key, value] of formData.entries()) {
                        console.log(`${key}: ${value}`);
                    }

                    $.ajax({
                        url: '/Admin/Solution/Upsert',
                        type: 'POST',
                        data: formData,
                        contentType: false,
                        processData: false,
                        success: function (response) {
                            console.log('Server response:', response);
                            if (response.success) {
                                window.clearSessionStorage();
                                toastr.success('Action completed successfully!');
                                window.location.href = response.redirectTo;
                            } else {
                                toastr.error(response.message || 'Action failed. Please try again.');
                                if (response.innerException) {
                                    console.error('Inner exception:', response.innerException);
                                    toastr.error('Details: ' + response.innerException);
                                }
                                if (response.errors) {
                                    toastr.error('Validation errors: ' + response.errors.join(', '));
                                }
                            }
                        },
                        error: function (xhr, status, error) {
                            console.error('AJAX error:', status, error, xhr.responseText);
                            toastr.error('An error occurred while submitting: ' + (xhr.responseText || error));
                        }
                    });
                } catch (e) {
                    console.error('Error during form submission:', e);
                    toastr.error('An error occurred during submission: ' + e.message);
                }
            });
        });
    </script>
}