@model SupportHub.Models.SolutionViewModel
@{
    ViewData["Title"] = Model.Id > 0 ? "Edit Solution" : "Create Solution";
}

<div class="card shadow border-0 mt-4">
    <div class="card-header bg-secondary bg-gradient ml-0 py-3">
        <h2 class="text-center py-2">@ViewData["Title"]</h2>
    </div>
    <div class="container mb-5 pb-5">
        <div class="card-body p-4">
            <form method="post" enctype="multipart/form-data" asp-action="Upsert" id="solutionForm">
                <input type="hidden" asp-for="Id" />
                <!-- Title -->
                <div class="mb-3">
                    <label asp-for="Title"></label>
                    <input asp-for="Title" class="form-control" required />
                    <span asp-validation-for="Title" class="text-danger"></span>
                </div>

                <!-- Product and Subcategory in the same row -->
                <div class="mb-3 row">
                    <div class="col-md-6">
                        <label asp-for="ProductId">Product</label>
                        <select asp-for="ProductId" class="form-control" id="productDropdown" required>
                            <option value="">Select Product</option>
                            @foreach (var product in Model.Products)
                            {
                                <option value="@product.Id">@product.ProductName</option>
                            }
                        </select>
                        <span asp-validation-for="ProductId" class="text-danger"></span>
                    </div>
                    <div class="col-md-6">
                        <label asp-for="SubCategoryId">Subcategory</label>
                        <select asp-for="SubCategoryId" class="form-control" id="subCategoryDropdown">
                            <option value="">Select Subcategory</option>
                            @if (Model.SubCategories != null)
                            {
                                @foreach (var sub in Model.SubCategories)
                                {
                                    <option value="@sub.Id" selected="@(sub.Id == Model.SubCategoryId)">@sub.Name</option>
                                }
                            }
                        </select>
                    </div>
                </div>

                <!-- Issue Description -->
                <div class="mb-3">
                    <label asp-for="IssueDescription">Related Issue</label>
                    <textarea asp-for="IssueDescription" class="form-control" readonly="@(!string.IsNullOrEmpty(Model.IssueDescription))"></textarea>
                </div>

                <!-- Category and Contributors in the same row -->
                <div class="mb-3 row">
                    <div class="col-md-6">
                        <label asp-for="CategoryId">Category</label>
                        <select asp-for="CategoryId" class="form-control" id="categoryDropdown" required>
                            <option value="">Select Category</option>
                            @foreach (var category in Model.Categories)
                            {
                                <option value="@category.Id">@category.Name</option>
                            }
                        </select>
                        <span asp-validation-for="CategoryId" class="text-danger"></span>
                    </div>
                    <div class="col-md-6">
                        <label asp-for="Contributors">Contributors</label>
                        <input asp-for="Contributors" class="form-control" placeholder="e.g., John Doe, Jane Smith" />
                    </div>
                </div>

                <!-- Template -->
                <div class="mb-3">
                    <label asp-for="HtmlContent">Solution Content</label>
                    <textarea id="editor">@Html.Raw(Model.HtmlContent)</textarea>
                    <input type="hidden" id="HtmlContent" name="HtmlContent" value="@Html.Raw(Model.HtmlContent)" />
                    <span asp-validation-for="HtmlContent" class="text-danger"></span>
                </div>

                <!-- Attachments Section -->
                <div class="mb-3">
                    <button type="button" id="uploadAttachmentBtn" class="btn btn-success btn-sm">Add Attachment</button>
                    <input type="file" name="files" id="attachmentInput" multiple style="display: none;" />
                    <ul id="attachmentList" class="list-group mt-2">
                        @if (ViewData["AttachmentLinks"] != null)
                        {
                            var links = ViewData["AttachmentLinks"] as IEnumerable<dynamic>;
                            var solutionAttachments = Model.Attachments;
                            if (links != null && links.Any())
                            {
                                var index = 0;
                                foreach (var link in links)
                                {
                                    var attachment = solutionAttachments.FirstOrDefault(a => a.Id == (int)link.Id);
                                    var isInternal = attachment?.IsInternal ?? false;
                                    <li class="list-group-item d-flex justify-content-between align-items-center" data-attachment-id="@link.Id">
                                        <div>
                                            <a href="@link.Url" target="_blank">@link.FileName</a><br />
                                            <input type="text" class="form-control mt-1 caption-input" placeholder="Enter caption" data-index="@index" value="@(attachment?.Caption ?? "")" />
                                        </div>
                                        <div>
                                            <input type="checkbox" class="form-check-input internal-attachment" data-index="@index" @(isInternal ? "checked" : "") />
                                            <span>Internal</span>
                                            <span class="text-danger delete-attachment ms-3" style="cursor:pointer;" data-index="@index" onclick="removeAttachment(@link.Id)">❌</span>
                                        </div>
                                    </li>
                                    index++;
                                }
                            }
                        }
                    </ul>
                    <input type="hidden" id="attachmentData" name="AttachmentData" value="@Html.Raw(Json.Serialize(Model.Attachments.Select(a => new { id = a.Id, fileName = a.FileName, caption = a.Caption, isInternal = a.IsInternal })))" />
                </div>

                <!-- References Section -->
                <div class="mb-3">
                    <button type="button" id="addReferenceBtn" class="btn btn-success btn-sm">Add Reference</button>
                    <ul id="referenceList" class="list-group mt-2">
                        @if (Model.References != null)
                        {
                            var index = 0;
                            foreach (var reference in Model.References)
                            {
                                <li class="list-group-item d-flex justify-content-between align-items-center" data-reference-id="@reference.Id">
                                    <div>
                                        <a href="@reference.Url" target="@reference.OpenOption">@reference.Url</a><br />
                                        <input type="text" class="form-control mt-1 description-input" placeholder="Enter description" value="@reference.Description" data-index="@index" />
                                    </div>
                                    <div>
                                        <input type="checkbox" class="form-check-input internal-reference" data-index="@index" @(reference.IsInternal ? "checked" : "") />
                                        <span>Internal</span>
                                        <span class="text-danger delete-reference ms-3" style="cursor:pointer;" data-index="@index">❌</span>
                                    </div>
                                </li>
                                index++;
                            }
                        }
                    </ul>
                    <input type="hidden" id="referenceData" name="ReferenceData" value="[]" />
                </div>

                <!-- Buttons -->
                <div class="text-center mt-4">
                    <button type="submit" name="submitAction" value="Save" class="btn btn-primary mx-2" style="width:200px">
                        <i class="bi bi-save"></i> Save Draft
                    </button>
                    <button type="submit" name="submitAction" value="Submit" class="btn btn-success mx-2" style="width:200px">
                        <i class="bi bi-check-circle"></i> Submit for Review
                    </button>
                    <button type="submit" name="submitAction" value="Cancel" class="btn btn-outline-secondary mx-2" style="width:200px">
                        <i class="bi bi-arrow-left-circle"></i> Cancel
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>
<div class="mb-5 pb-5"></div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="~/js/tinymce-solution.js"></script>
    <script src="~/js/solution-attachments-references.js"></script>
    <partial name="_ValidationScriptsPartial" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/css/toastr.min.css" />

    <script>
        $(document).ready(function () {
            let submitActionValue = null;

            $('button[type="submit"]').on('click', function (e) {
                submitActionValue = $(this).val();
                console.log('Button clicked, submitAction set to:', submitActionValue);
            });

            $('#productDropdown').change(function () {
                var productId = $(this).val();
                if (productId) {
                    $.get('/Admin/Issue/GetSubCategories', { productId: productId }, function (data) {
                        var subCatDropdown = $('#subCategoryDropdown');
                        subCatDropdown.empty().append('<option value="">Select Subcategory</option>');
                        $.each(data, function (i, item) {
                            subCatDropdown.append($('<option>').val(item.id).text(item.name));
                        });
                    }).fail(function () {
                        console.error('Failed to load subcategories');
                    });
                }
            });

            $('#categoryDropdown').change(function () {
                var categoryId = $(this).val();
                if (categoryId) {
                    loadCategoryTemplate(categoryId);
                }
            });

            function loadCategoryTemplate(categoryId) {
                $.get('/Admin/Solution/GetCategoryTemplate', { categoryId: categoryId }, function (data) {
                    if (data.success) {
                        var editor = tinymce.get('editor');
                        if (editor) {
                            editor.setContent(data.htmlContent || '');
                            $('#HtmlContent').val(editor.getContent());
                        }
                        window.updateAttachmentsAndReferences(data.attachments || [], data.references || []);
                    }
                }).fail(function () {
                    console.error('Failed to load category template');
                });
            }

            function removeAttachment(attachmentId) {
                if (confirm('Are you sure you want to remove this attachment?')) {
                    $.post('/Admin/Solution/RemoveAttachment', { id: attachmentId }, function (response) {
                        if (response.success) {
                            toastr.success(response.message);
                            $(`li[data-attachment-id="${attachmentId}"]`).remove();
                            window.attachments = window.attachments.filter(a => a.id !== attachmentId);
                            updateAttachmentData();
                        } else {
                            toastr.error(response.message);
                        }
                    }).fail(function () {
                        toastr.error('Failed to remove attachment.');
                    });
                }
            }

            $('#solutionForm').on('submit', function (e) {
                e.preventDefault();
                console.log('Form submit triggered');

                var editor = tinymce.get('editor');
                if (!editor) {
                    toastr.error('Editor not initialized. Please try again.');
                    return false;
                }

                tinymce.triggerSave();
                var editorContent = editor.getContent();
                $('#HtmlContent').val(editorContent);

                var title = $('#Title').val();
                var productId = $('#productDropdown').val();
                var categoryId = $('#categoryDropdown').val();
                if (!title || !productId || productId === "" || !categoryId || categoryId === "" || !editorContent) {
                    toastr.error('Please fill all required fields.');
                    return false;
                }

                var formData = new FormData(this);
                if (submitActionValue) {
                    formData.append('submitAction', submitActionValue);
                } else {
                    toastr.error('Please use the Save Draft, Submit for Review, or Cancel button.');
                    return false;
                }

                $.ajax({
                    url: '/Admin/Solution/Upsert',
                    type: 'POST',
                    data: formData,
                    contentType: false,
                    processData: false,
                    success: function (response) {
                        console.log('Server response:', response);
                        if (response.success) {
                            toastr.success('Action completed successfully!');
                            window.location.href = response.redirectTo;
                        } else {
                            toastr.error(response.message || 'Action failed. Please try again.');
                            if (response.innerException) {
                                console.error('Inner exception:', response.innerException);
                                toastr.error('Details: ' + response.innerException);
                            }
                            if (response.errors) {
                                toastr.error('Validation errors: ' + response.errors.join(', '));
                            }
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error('AJAX error:', status, error, xhr.responseText);
                        toastr.error('An error occurred while submitting: ' + (xhr.responseText || error));
                    }
                });
            });

            window.removeAttachment = removeAttachment;
        });

        function updateAttachmentData() {
            $('#attachmentData').val(JSON.stringify(window.attachments.length > 0 ? window.attachments : []));
        }
    </script>
}