@model SupportHub.Models.Category
@{
    ViewData["Title"] = "Create Category";
}

<div class="card shadow border-0 mt-4">
    <div class="card-header bg-secondary bg-gradient ml-0 py-3">
        <h2 class="text-center py-2">@ViewData["Title"]</h2>
    </div>
    <div class="container mb-5 pb-5">
        <div class="card-body p-4">
            <form method="post" enctype="multipart/form-data" asp-action="Create" id="categoryForm">
                <!-- Name -->
                <div class="mb-3">
                    <label asp-for="Name"></label>
                    <input asp-for="Name" class="form-control" required />
                    <span asp-validation-for="Name" class="text-danger"></span>
                </div>

                <!-- Description -->
                <div class="mb-3">
                    <label asp-for="Description"></label>
                    <textarea asp-for="Description" class="form-control"></textarea>
                    <span asp-validation-for="Description" class="text-danger"></span>
                </div>

                <!-- Parent Category -->
                <div class="mb-3 row p-1">
                    <label asp-for="ParentCategoryId">Select Parent Category</label>
                    <select asp-for="ParentCategoryId" class="form-control" id="parentCategoryDropdown">
                        <option value="0">This is a Parent Category</option>
                        @foreach (var category in Model.Categories.Where(c => c.ParentCategoryId == null))
                        {
                            <option value="@category.Id">@category.Name</option>
                        }
                    </select>
                    <span asp-validation-for="ParentCategoryId" class="text-danger"></span>
                </div>

                <!-- Template -->
                <div class="mb-3">
                    <label asp-for="HtmlContent">Template</label>
                    <textarea id="editor"></textarea>
                    <input type="hidden" id="HtmlContent" name="HtmlContent" />
                    <span asp-validation-for="HtmlContent" class="text-danger"></span>
                </div>

                <!-- Attachments Section -->
                <div class="mb-3">
                    <button type="button" id="uploadAttachmentBtn" class="btn btn-success btn-sm">Add Attachment</button>
                    <input type="file" name="files" id="attachmentInput" multiple style="display: none;" />
                    <ul id="attachmentList" class="list-group mt-2"></ul>
                    <input type="hidden" id="attachmentData" name="AttachmentData" value="[]" />
                </div>

                <!-- References Section -->
                <div class="mb-3">
                    <button type="button" id="addReferenceBtn" class="btn btn-success btn-sm">Add Reference</button>
                    <ul id="referenceList" class="list-group mt-2"></ul>
                    <input type="hidden" id="referenceData" name="ReferenceData" value="[]" />
                </div>

                <!-- Buttons -->
                <div class="text-center mt-4">
                    <button type="submit" name="submitAction" value="Save" class="btn btn-primary mx-2" style="width:200px" id="saveButton">
                        <i class="bi bi-save"></i> Save
                    </button>
                    <button type="button" id="cancelButton" class="btn btn-outline-secondary mx-2" style="width:200px">
                        <i class="bi bi-arrow-left-circle"></i> Cancel
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>
<div class="mb-5 pb-5"></div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.7.1.min.js" integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>
    <!-- Load Prism.js core and language components for syntax highlighting -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/prism.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-markup-templating.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-markup.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-javascript.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-css.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-php.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-python.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-ruby.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-java.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-c.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-csharp.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-sql.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism.min.css" />
    <!-- Load TinyMCE 7.x as specified -->
    <script src="https://cdn.tiny.cloud/1/va71qjjfnk13w6l1jzbwaocco4pacxz41q6d5g2fo2hdbljq/tinymce/7/tinymce.min.js" referrerpolicy="origin"></script>
    <!-- Add cache-busting query parameter to ensure the latest scripts are loaded -->
    <script src="~/js/tinymce-init.js?v=1.1-rev2"></script>
    <script src="~/js/category-attachments-references.js?v=2.11"></script>
    <partial name="_ValidationScriptsPartial" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/css/toastr.min.css" />

    <script>
        $(document).ready(function () {
            console.log("Category Create view script loaded (v1.18)");

            // Ensure Prism.js is loaded before proceeding
            function waitForPrism() {
                if (typeof Prism !== 'undefined') {
                    console.log("Prism.js is loaded, proceeding with TinyMCE logic");
                } else {
                    console.warn("Prism.js not loaded yet, retrying in 100ms");
                    setTimeout(waitForPrism, 100);
                }
            }

            waitForPrism();

            const urlParams = new URLSearchParams(window.location.search);
            const isCreateMode = !urlParams.has('id');
            console.log("isCreateMode:", isCreateMode);

            // Wait for TinyMCE to initialize before interacting with the editor
            jQuery(document).one('tinymceInitialized', function () {
                console.log("tinymceInitialized event received");
                if (tinymce.get("editor")) {
                    console.log("TinyMCE editor initialized successfully on Create page");

                    // Check for saved editor content in sessionStorage
                    const categoryId = document.querySelector('input[name="Id"]')?.value || 'create';
                    const savedContent = sessionStorage.getItem(`categoryEditorContent_${categoryId}`);
                    if (savedContent) {
                        tinymce.get("editor").setContent(savedContent);
                        document.getElementById('HtmlContent').value = savedContent;
                        console.log("Restored TinyMCE content from sessionStorage:", savedContent);
                    } else {
                        tinymce.get("editor").setContent("");
                        document.getElementById('HtmlContent').value = "";
                        console.log("No saved content in sessionStorage, set to empty");
                    }
                } else {
                    console.error("TinyMCE editor not found after tinymceInitialized");
                    toastr.error("Unable to initialize TinyMCE editor. Please refresh the page.");
                }
            });

            $('#parentCategoryDropdown').on('change', function () {
                var categoryId = $(this).val();
                console.log('Parent category selected:', categoryId);
                if (categoryId && categoryId !== "0") {
                    loadCategoryTemplate(categoryId);
                } else {
                    console.log("No parent category selected, resetting");
                    window.attachments = [];
                    window.references = [];
                    window.pendingFiles = [];
                    window.deletedAttachmentIds = [];
                    window.deletedReferenceIds = [];
                    window.reindexAttachments();
                    window.reindexReferences();
                    window.updateAttachmentData();
                    window.updateReferenceData();

                    if (tinymce.get("editor")) {
                        tinymce.get("editor").setContent("");
                        $('#HtmlContent').val("");
                        console.log("TinyMCE content reset");
                    } else {
                        console.warn("TinyMCE editor not initialized yet, waiting for tinymceInitialized");
                        jQuery(document).one('tinymceInitialized', function () {
                            if (tinymce.get("editor")) {
                                tinymce.get("editor").setContent("");
                                $('#HtmlContent').val("");
                                console.log("TinyMCE content reset after initialization");
                            }
                        });
                    }
                    window.clearSessionStorage();
                }
            });

            function loadCategoryTemplate(categoryId) {
                console.log(`Loading template for categoryId=${categoryId}`);
                $.get('/Admin/Category/GetCategoryData', { id: categoryId }, function (data) {
                    console.log('GetCategoryData response:', data);
                    if (data.success) {
                        var editor = tinymce.get('editor');
                        if (editor) {
                            editor.setContent(data.data.htmlContent || '');
                            $('#HtmlContent').val(data.data.htmlContent || '');
                            console.log("TinyMCE content updated:", data.data.htmlContent);
                        } else {
                            console.warn("TinyMCE editor not initialized yet, waiting for tinymceInitialized");
                            jQuery(document).one('tinymceInitialized', function () {
                                if (tinymce.get("editor")) {
                                    tinymce.get("editor").setContent(data.data.htmlContent || '');
                                    $('#HtmlContent').val(data.data.htmlContent || '');
                                    console.log("TinyMCE content updated after initialization:", data.data.htmlContent);
                                }
                            });
                        }
                        window.updateAttachmentsAndReferences(data.data.attachments || [], data.data.references || []);
                        window.clearSessionStorage();
                        saveStateToStorage();
                        console.log("Debug: window.attachments:", window.attachments);
                        console.log("Debug: window.references:", window.references);
                    } else {
                        console.error('GetCategoryData failed:', data.message);
                        toastr.error(data.message || 'Failed to load category data.');
                    }
                }).fail(function (xhr, status, error) {
                    console.error('GetCategoryData AJAX error:', status, error, xhr.responseText);
                    toastr.error('Error loading category data: ' + error);
                });
            }

            function saveStateToStorage() {
                try {
                    const categoryId = document.querySelector('input[name="Id"]')?.value || 'create';
                    sessionStorage.setItem(`categoryAttachments_${categoryId}`, JSON.stringify(window.attachments));
                    sessionStorage.setItem(`categoryReferences_${categoryId}`, JSON.stringify(window.references));
                    sessionStorage.setItem(`categoryPendingFiles_${categoryId}`, JSON.stringify(window.pendingFiles));
                    console.log('Saved to sessionStorage:', { attachments: window.attachments, references: window.references, pendingFiles: window.pendingFiles });
                } catch (e) {
                    console.error('Error saving to sessionStorage:', e);
                }
            }

            $('#cancelButton').on('click', function (e) {
                e.preventDefault();
                console.log('Cancel button clicked');
                window.clearSessionStorage();
                toastr.info('Changes discarded.');
                window.location.href = '/Admin/Category/Index';
            });
        });
    </script>
}