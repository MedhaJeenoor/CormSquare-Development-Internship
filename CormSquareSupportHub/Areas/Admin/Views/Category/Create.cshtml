@model Category

@{
    ViewData["Title"] = "Create New Category";
}

<div class="card shadow border-0 mt-4">
    <div class="card-header bg-secondary bg-gradient ml-0 py-3">
        <div class="row">
            <div class="col-12 text-center">
                <h2 class="py-2">Create New Category</h2>
            </div>
        </div>
    </div>
    <div class="container mb-5 pb-5">
        <div class="card-body p-4">
            <form method="post" enctype="multipart/form-data">

                <div class="mb-3 row p-1">
                    <label asp-for="Name"></label>
                    <input asp-for="Name" class="form-control" />
                    <span asp-validation-for="Name" class="text-danger"></span>
                </div>

                <!-- Parent Category Dropdown -->
                <div class="mb-3 row p-1">
                    <label>Select Parent Category</label>
                    <select asp-for="ParentCategoryId" class="form-control" id="parentCategoryDropdown">
                        <option value="0">This is a Parent Category</option>
                        @foreach (var category in Model.Categories.Where(c => c.ParentCategoryId == null)) // Parent Categories
                        {
                            <option value="@category.Id">@category.Name</option>
                            @foreach (var subcategory in Model.Categories.Where(c => c.ParentCategoryId == category.Id))
                            {
                                <option value="@subcategory.Id">— @subcategory.Name</option>
                            }
                        }
                    </select>
                </div>

                <div class="mb-3 row p-1">
                    <label>Optimal Creation Time</label>
                    <input asp-for="OptimalCreationTime" class="form-control" id="optimalCreationTime" type="number" min="0" />
                    <span asp-validation-for="OptimalCreationTime" class="text-danger"></span>
                    <span id="optimalCreationTimeError" class="text-danger d-none">Subcategories must have an Optimal Creation Time greater than 0.</span>
                    <span id="parentOptimalCreationTimeError" class="text-danger d-none">Parent categories must have an Optimal Creation Time of 0.</span>
                </div>
  
                <div class="mb-3 row p-1">
                    <label>Description</label>
                    <textarea asp-for="Description" class="form-control"></textarea>
                    <span asp-validation-for="Description" class="text-danger"></span>
                </div>

                <div class="mb-3 row p-1">
                    <label>Display Order</label>
                    <input asp-for="DisplayOrder" class="form-control" type="number" min="0" id="displayOrderInput" />
                    <span asp-validation-for="DisplayOrder" class="text-danger"></span>
                    <span id="displayOrderError" class="text-danger d-none">This display order is already taken.</span>
                </div>


                <!-- Template Fields -->
                <div class="mb-3 p-1">
                    <label>Template Fields</label>
                    <div id="templateFieldsContainer" class="mt-3"></div>
                    <button type="button" id="addFieldBtn" class="btn btn-success mt-2">
                        <i class="bi bi-plus-circle"></i> Add Field
                    </button>
                    <input type="hidden" id="TemplateJson" name="TemplateJson" />
                </div>

                <div class="mb-4 row p-1">
                    <div class="form-check">
                        <input asp-for="AllowAttachments" class="form-check-input" id="allowAttachments" />
                        <label class="form-check-label">Enable Attachments</label>
                    </div>
                    <div class="form-check mt-2">
                        <input asp-for="AllowReferenceLinks" class="form-check-input" id="allowReferenceLinks" />
                        <label class="form-check-label">Enable Reference Links</label>
                    </div>
                </div>

                <div class="text-center mt-4">
                    <button type="submit" class="btn btn-primary mx-2" style="width:200px">
                        <i class="bi bi-check-circle"></i> Create
                    </button>
                    <a asp-controller="Category" asp-action="Index" class="btn btn-outline-secondary mx-2" style="width:200px">
                        <i class="bi bi-arrow-left-circle"></i> Back to List
                    </a>
                </div>
            </form>
        </div>
    </div>
</div>

<div class="mb-5 pb-5"></div>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        var displayOrderInput = document.getElementById("displayOrderInput");
        var displayOrderError = document.getElementById("displayOrderError");

        if (!displayOrderInput || !displayOrderError) {
            console.error("Display order input or error message is missing.");
            return;
        }

        // Fetch existing display order values from API
        fetch("/api/Category/GetExistingDisplayOrders")
            .then(response => response.json())
            .then(existingDisplayOrders => {
                console.log("Existing Display Orders:", existingDisplayOrders);

                // Validate input when user types
                displayOrderInput.addEventListener("input", function () {
                    var enteredValue = displayOrderInput.value.trim();

                    if (enteredValue !== "" && existingDisplayOrders.includes(parseInt(enteredValue))) {
                        displayOrderError.classList.remove("d-none"); // Show error message
                        displayOrderInput.classList.add("border-danger"); // Highlight input field
                    } else {
                        displayOrderError.classList.add("d-none"); // Hide error message
                        displayOrderInput.classList.remove("border-danger"); // Remove highlight
                    }
                });
            })
            .catch(error => console.error("Error fetching display order data:", error));
    });
</script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        var parentCategoryDropdown = document.getElementById("parentCategoryDropdown");
        var optimalCreationTimeInput = document.getElementById("optimalCreationTime");
        var optimalCreationTimeError = document.getElementById("optimalCreationTimeError");
        var parentOptimalCreationTimeError = document.getElementById("parentOptimalCreationTimeError");

        function validateOptimalCreationTime() {
            var isSubcategory = parentCategoryDropdown.value !== "0"; // Assuming "0" means it's a parent category
            var enteredValue = parseInt(optimalCreationTimeInput.value.trim());

            if (isSubcategory) {
                // Subcategories must have Optimal Creation Time > 0
                if (enteredValue <= 0) {
                    optimalCreationTimeError.classList.remove("d-none");
                    parentOptimalCreationTimeError.classList.add("d-none");
                    optimalCreationTimeInput.classList.add("border-danger");
                } else {
                    optimalCreationTimeError.classList.add("d-none");
                    optimalCreationTimeInput.classList.remove("border-danger");
                }
            } else {
                // Parent categories must have Optimal Creation Time = 0
                if (enteredValue !== 0) {
                    parentOptimalCreationTimeError.classList.remove("d-none");
                    optimalCreationTimeError.classList.add("d-none");
                    optimalCreationTimeInput.classList.add("border-danger");
                } else {
                    parentOptimalCreationTimeError.classList.add("d-none");
                    optimalCreationTimeInput.classList.remove("border-danger");
                }
            }
        }

        // Run validation when input changes
        optimalCreationTimeInput.addEventListener("input", validateOptimalCreationTime);
        parentCategoryDropdown.addEventListener("change", validateOptimalCreationTime);
    });
</script>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        var parentCategoryDropdown = document.getElementById("parentCategoryDropdown");
        var optimalCreationTimeInput = document.getElementById("optimalCreationTime");
        var optimalCreationTimeError = document.getElementById("optimalCreationTimeError");

        function validateOptimalCreationTime() {
            var isSubcategory = parentCategoryDropdown.value !== "0";
            var enteredValue = parseInt(optimalCreationTimeInput.value.trim());

            if (isSubcategory && enteredValue <= 1) {
                optimalCreationTimeError.classList.remove("d-none"); // Show error message
                optimalCreationTimeInput.classList.add("border-danger"); // Highlight input
            } else {
                optimalCreationTimeError.classList.add("d-none"); // Hide error
                optimalCreationTimeInput.classList.remove("border-danger"); // Remove highlight
            }
        }

        // Run validation when input changes
        optimalCreationTimeInput.addEventListener("input", validateOptimalCreationTime);
        parentCategoryDropdown.addEventListener("change", validateOptimalCreationTime);
    });
</script>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        // Get references to the dropdown and checkboxes
        var parentCategoryDropdown = document.getElementById("parentCategoryDropdown");
        var allowAttachmentsCheckbox = document.getElementById("allowAttachments");
        var allowReferenceLinksCheckbox = document.getElementById("allowReferenceLinks");

        // Ensure all elements exist
        if (!parentCategoryDropdown || !allowAttachmentsCheckbox || !allowReferenceLinksCheckbox) {
            console.error("One or more required elements are missing from the page.");
            return;
        }

        function updateCheckboxes() {
            var selectedParentId = parentCategoryDropdown.value;
            console.log("Selected Parent Category ID:", selectedParentId); // Debugging

            if (selectedParentId && selectedParentId !== "0") {
                var url = `/api/Category/GetCategorySettings/${selectedParentId}`;
                console.log("Fetching data from:", url); // Debugging

                fetch(url)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`HTTP error! Status: ${response.status}`);
                        }
                        return response.json();
                    })
                    .then(data => {
                        console.log("Received Data:", data); // Debugging

                        // Ensure the response is an object
                        if (!data || typeof data !== "object") {
                            throw new Error("Invalid API response format");
                        }

                        // Handle missing properties safely
                        const allowAttachments = data.allowAttachments ?? false;
                        const parentHasAttachments = data.parentHasAttachments ?? false;
                        const allowReferenceLinks = data.allowReferenceLinks ?? false;
                        const parentHasReferenceLinks = data.parentHasReferenceLinks ?? false;

                        // Set checkboxes
                        allowAttachmentsCheckbox.checked = allowAttachments;
                        allowAttachmentsCheckbox.disabled = !parentHasAttachments;

                        allowReferenceLinksCheckbox.checked = allowReferenceLinks;
                        allowReferenceLinksCheckbox.disabled = !parentHasReferenceLinks;
                    })
                    .catch(error => {
                        console.error("Error fetching category settings:", error);

                        // Reset checkboxes in case of an error
                        resetCheckboxes();
                    });
            } else {
                console.log("No parent category selected. Resetting checkboxes."); // Debugging
                resetCheckboxes();
            }
        }

        function resetCheckboxes() {
            allowAttachmentsCheckbox.checked = false;
            allowAttachmentsCheckbox.disabled = false;

            allowReferenceLinksCheckbox.checked = false;
            allowReferenceLinksCheckbox.disabled = false;
        }

        // Attach event listener to dropdown change
        parentCategoryDropdown.addEventListener("change", updateCheckboxes);

        // Call once on page load
        updateCheckboxes();
    });
</script>


@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}